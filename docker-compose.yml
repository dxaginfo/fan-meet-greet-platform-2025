version: '3.8'

services:
  # Backend API service
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=development
      - PORT=5000
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/fan_meet_greet
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_key_here_change_in_production
      - JWT_EXPIRY=24h
      - S3_BUCKET=fan-meet-greet-photos
      - AWS_ACCESS_KEY_ID=your_aws_access_key
      - AWS_SECRET_ACCESS_KEY=your_aws_secret_key
      - AWS_REGION=us-east-1
    networks:
      - app-network
    command: npm run dev

  # Frontend React application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api
    environment:
      - REACT_APP_API_URL=http://localhost:5000/api/v1
      - REACT_APP_FIREBASE_API_KEY=your_firebase_api_key
      - REACT_APP_FIREBASE_AUTH_DOMAIN=your_firebase_auth_domain
      - REACT_APP_FIREBASE_PROJECT_ID=your_firebase_project_id
      - REACT_APP_FIREBASE_STORAGE_BUCKET=your_firebase_storage_bucket
      - REACT_APP_FIREBASE_MESSAGING_SENDER_ID=your_firebase_sender_id
      - REACT_APP_FIREBASE_APP_ID=your_firebase_app_id
    networks:
      - app-network
    command: npm start

  # PostgreSQL database
  postgres:
    image: postgres:13-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fan_meet_greet
    networks:
      - app-network

  # Redis for caching and pub/sub
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # Adminer for database management
  adminer:
    image: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge